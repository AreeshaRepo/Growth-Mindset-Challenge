import streamlit as st
import datetime
import pandas as pd
import os
from io import BytesIO
import random

def get_motivation():
    motivational_quotes = [
        "Believe you can and you're halfway there. ‚Äì Theodore Roosevelt",
        "The only way to do great work is to love what you do. ‚Äì Steve Jobs",
        "Success is not final, failure is not fatal: It is the courage to continue that counts. ‚Äì Winston Churchill",
        "Your time is limited, don't waste it living someone else's life. ‚Äì Steve Jobs",
        "The future belongs to those who believe in the beauty of their dreams. ‚Äì Eleanor Roosevelt",
        "Don't watch the clock; do what it does. Keep going. ‚Äì Sam Levenson",
        "The best way to predict the future is to create it. ‚Äì Peter Drucker",
        "You are never too old to set another goal or to dream a new dream. ‚Äì C.S. Lewis",
        "Act as if what you do makes a difference. It does. ‚Äì William James",
        "Keep your face always toward the sunshine‚Äîand shadows will fall behind you. ‚Äì Walt Whitman",
    ]
    return random.choice(motivational_quotes)

def growth_mindset_app():
    st.title("üå± Growth Mindset Challenge")

    st.header("Welcome to the Growth Mindset Challenge! üöÄ")
    st.write(
        "A growth mindset is the belief that abilities can be developed through dedication and hard work. "
        "This web app is designed to help you track your progress, stay motivated, and cultivate a positive learning attitude. "
        "Remember, every challenge is an opportunity for growth! üåü"
    )

    st.subheader("üìÖ Daily Reflection")
    date = st.date_input("Select Date", datetime.date.today())
    reflection = st.text_area("üìù What did you learn today?")
    challenges = st.text_area("üí° What challenges did you face, and how did you overcome them?")
    next_goal = st.text_area("üéØ What is your next goal for improvement?")

    if st.button("‚úÖ Submit Reflection"):
        st.success("Reflection Saved! Keep Growing! üöÄ")

    st.header("üí° Growth Mindset Tips")
    st.write("‚úî Embrace challenges as learning opportunities. üí™")
    st.write("‚úî Learn from mistakes instead of fearing them. üîÑ")
    st.write("‚úî Celebrate effort and progress over perfection. üéâ")
    st.write("‚úî Stay positive and keep pushing forward! üòä")
    st.write("‚úî Seek feedback and use it as a tool for improvement. ÔøΩ")
    st.write("‚úî Visualize success and take small steps toward your goals. üåà")
    st.write("‚úî Surround yourself with positive and supportive people. ü§ù")
    st.write("‚úî Practice gratitude to stay motivated and focused. üôè")

    if st.button("üíñ Get Inspired"):
        st.success(get_motivation())

    st.header("üìå Track Your Progress")
    st.write("üóÇ Keep a journal of your reflections and review your progress over time!")
    st.write("üìä Set weekly or monthly growth goals to measure your improvement.")
    st.write("üîÑ Stay consistent and celebrate small wins!")

    progress = st.slider("üìà How motivated do you feel today?", 0, 100, 50)
    if progress >= 75:
        st.success("üî• Amazing! Keep up the great work!")
    elif progress >= 50:
        st.info("üí™ You're doing great! Keep pushing forward!")
    else:
        st.warning("üåü Keep going! Every small effort matters!")

    st.header("üéØ Weekly Goal Setting")
    weekly_goal = st.text_area("What is your goal for this week?")
    if st.button("Set Weekly Goal"):
        st.success("Weekly goal set! Let's achieve it together! üöÄ")

    st.header("üìÖ Monthly Reflection")
    monthly_reflection = st.text_area("Reflect on your progress this month. What went well? What could be improved?")
    if st.button("Submit Monthly Reflection"):
        st.success("Monthly reflection saved! Keep growing! üå±")

    st.header("üôè Gratitude Journal")
    gratitude_entry = st.text_area("What are you grateful for today?")
    if st.button("Submit Gratitude Entry"):
        st.success("Gratitude entry saved! Practicing gratitude boosts positivity! üåü")

    st.header("üìö Resources for Growth")
    st.write("Here are some resources to help you on your growth journey:")
    st.write("- Books: 'Mindset' by Carol Dweck, 'Atomic Habits' by James Clear")
    st.write("- Podcasts: 'The Growth Mindset Podcast', 'The Tim Ferriss Show'")
    st.write("- Videos: TED Talks on growth mindset and personal development")
    st.write("- Courses: Online courses on Coursera, Udemy, or LinkedIn Learning")

    st.header("ü§ù Join the Community")
    st.write("Connect with like-minded individuals and share your growth journey!")
    st.write("- Forums: Reddit communities like r/GetMotivated, r/PersonalDevelopment")
    st.write("- Social Media: Follow hashtags like #GrowthMindset, #PersonalGrowth")
    st.write("- Local Meetups: Join local groups focused on self-improvement and growth")

    st.write("---")
    st.write("Built with ‚ù§ by Areesha Abdul Sattar | Stay motivated and keep growing! üå±")
    st.write("üìß Contact: areesha21314@gmail.com")

# Data Sweeper App
def data_sweeper_app():
    st.title("üìä Data Sweeper")
    st.write("‚ú® Transform your files between CSV and Excel formats with built-in data cleaning and visualization üßπüìà")

    uploaded_files = st.file_uploader("üìÇ Upload your files (CSV or Excel):", type=["csv", "xlsx"], accept_multiple_files=True)

    if uploaded_files:
        for file in uploaded_files:
            file_ext = os.path.splitext(file.name)[-1].lower()

            if file_ext == ".csv":
                df = pd.read_csv(file)
            elif file_ext == ".xlsx":
                df = pd.read_excel(file)
            else:
                st.error(f"‚ùå Unsupported file type: {file_ext}")
                continue  

            st.write(f"üìÑ **File Name:** {file.name}")
            st.write(f"üìè **File Size:** {file.size / 1024:.2f} KB")

            st.write("üëÄ Preview the Head of the Dataframe")
            st.dataframe(df.head())

            st.subheader("üßπ Data Cleaning Options")
            if st.checkbox(f"üßΩ Clean Data for {file.name}"):
                col1, col2 = st.columns(2)

                with col1:
                    if st.button(f"üö´ Remove Duplicates from {file.name}"):
                        df.drop_duplicates(inplace=True)
                        st.write("‚úÖ Duplicates Removed!")

                with col2:
                    if st.button(f"ü™£ Fill Missing Values for {file.name}"):
                        numeric_cols = df.select_dtypes(include=["number"]).columns
                        df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())
                        st.write("‚úÖ Missing Values have been Filled!")
              
            st.subheader("üîç Select Columns to Convert")
            columns = st.multiselect(f"üìå Choose Columns for {file.name}", df.columns, default=df.columns)
            df = df[columns]

            st.subheader("üìä Data Visualization")
            if st.checkbox(f"üìà Show visualization for {file.name}"):
                numeric_data = df.select_dtypes(include="number")
                st.write("üìä Numeric Data Preview:", numeric_data)

                if not numeric_data.empty and numeric_data.shape[1] >= 1:
                    st.bar_chart(numeric_data)
                else:
                    st.warning(f"‚ö†Ô∏è No numeric columns found in {file.name} for visualization!")

            st.subheader("üîÑ Conversion Options")
            conversion_type = st.radio(f"üîß Convert {file.name} to:", ["CSV", "Excel"], key=file.name)
            if st.button(f"üîÉ Convert {file.name}"):
                buffer = BytesIO()
                if conversion_type == "CSV":
                    df.to_csv(buffer, index=False)
                    file_name = file.name.replace(file_ext, ".csv")
                    mime_type = "text/csv"
                elif conversion_type == "Excel":
                    df.to_excel(buffer, index=False)
                    file_name = file.name.replace(file_ext, ".xlsx")
                    mime_type = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

                buffer.seek(0)
                st.download_button(
                    label=f"‚¨áÔ∏è Download {file.name} as {conversion_type}",
                    data=buffer,
                    file_name=file_name,
                    mime=mime_type
                )

    st.success("üéâ All files processed!")

def main():
    st.sidebar.title("üå± Navigation")
    app_choice = st.sidebar.radio("Choose an App:", ["Data Sweeper", "Growth Mindset Challenge"])

    if app_choice == "Data Sweeper":
        data_sweeper_app()
    else:
        growth_mindset_app()

if __name__ == "__main__":
    main()